// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package scheduler.actions;

import java.util.Date;
import java.util.List;
import scheduler.impl.ScheduleManager;
import scheduler.proxies.ActionType;
import scheduler.proxies.JobStatus;
import scheduler.proxies.ScheduledAction;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.webui.CustomJavaAction;

public class EvaluateInstruction extends CustomJavaAction<Boolean>
{
	private IMendixObject __JobInstructionParameter1;
	private scheduler.proxies.JobInstruction JobInstructionParameter1;

	public EvaluateInstruction(IContext context, IMendixObject JobInstructionParameter1)
	{
		super(context);
		this.__JobInstructionParameter1 = JobInstructionParameter1;
	}

	@Override
	public Boolean executeAction() throws Exception
	{
		this.JobInstructionParameter1 = __JobInstructionParameter1 == null ? null : scheduler.proxies.JobInstruction.initialize(getContext(), __JobInstructionParameter1);

		// BEGIN USER CODE

		IContext sysContext = Core.createSystemContext();
		ScheduledAction action = this.JobInstructionParameter1.getJobInstruction_ScheduledAction(sysContext);
		if ( action == null && this.JobInstructionParameter1.getActionId() != null ) {
			
			List<IMendixObject> result = Core.retrieveXPathQueryEscaped(sysContext, "//%s[%s=%s]", ScheduledAction.entityName,
					ScheduledAction.MemberNames.InternalId.toString(), String.valueOf(this.JobInstructionParameter1.getActionId()));

			if ( result.size() > 0 ) {
				action = ScheduledAction.initialize(getContext(), result.get(0));
				this.JobInstructionParameter1.setJobInstruction_ScheduledAction(sysContext, action);
			}
		}

		this.JobInstructionParameter1.setStartedOn(sysContext, new Date());
		this.JobInstructionParameter1.setStatus(sysContext, JobStatus.Started);
		Core.commit(sysContext, this.__JobInstructionParameter1);

		boolean success = false;
		try {
			if ( action == null && this.JobInstructionParameter1.getActionType() != ActionType.RestartScheduler ) {
				this.JobInstructionParameter1.setFinishedOn(sysContext, new Date());
				this.JobInstructionParameter1.setStatus(sysContext, JobStatus.Completed_Failed);
				this.JobInstructionParameter1.setDetailedStatus("No action provided for the instruction");
				Core.commit(sysContext, this.__JobInstructionParameter1);
			}
			else if ( this.JobInstructionParameter1.getActionType() != null ) {
				this.JobInstructionParameter1.setFinishedOn(sysContext, new Date());

				switch (this.JobInstructionParameter1.getActionType()) {
				case EvaluateRunning:
				case Start:
					ScheduleManager.getInstance().startAction(action);
					success = true;
					break;
				case Stop:
					ScheduleManager.getInstance().stopAction(action);
					success = true;
					break;
				case UpdateConfiguration:
					success = ScheduleManager.getInstance().rescheduleAction(action);
					if ( !success )
						this.JobInstructionParameter1
								.setDetailedStatus("Unable to re-schedule the Job, mostlikely there wasn't an active scheduler.");
					break;
				case RestartScheduler:
					success = ScheduleManager.getInstance().restartScheduler();
					break;
				default:
					throw new CoreException("Unknown ActionType");
				}
			}
			else {
				this.JobInstructionParameter1.setStatus(sysContext, JobStatus.Completed_Failed);
				this.JobInstructionParameter1.setDetailedStatus("No action type specified");
			}
		}
		catch( Exception e ) {
			this.JobInstructionParameter1.setStatus(sysContext, JobStatus.Completed_Failed);
			this.JobInstructionParameter1.setDetailedStatus("An error occured while processing the request: " + e.getMessage());
			throw e;
		}
		finally {
			if ( success )
				this.JobInstructionParameter1.setStatus(sysContext, JobStatus.Completed_Successfull);
			else
				this.JobInstructionParameter1.setStatus(sysContext, JobStatus.Completed_Failed);

			this.JobInstructionParameter1.setFinishedOn(sysContext, new Date());
			Core.commit(sysContext, this.__JobInstructionParameter1);
		}

		return success;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public String toString()
	{
		return "EvaluateInstruction";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
